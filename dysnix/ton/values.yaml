replicaCount: 1

image:
  # -- image configuration for ton
  tonnode:
    repository: ghcr.io/ton-blockchain/ton
    pullPolicy: IfNotPresent
    tag: "v2024.09"
  # -- image configuration for ton api
  apinode:
    repository: toncenter/ton-http-api
    pullPolicy: IfNotPresent
    tag: "v2.0.46"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- set persistence info for data and archive
persistance:
  data:
    path: /data/chain
    type: hostPath
    perm: DirectoryOrCreate
    # type: hostPath  | existingClaim | pvc
    # hostPath: /data/chain
    # existingClaim: $name
    # storageClass: "standard"
    # accessModes:
    #   - ReadWriteOnce
    # size: 10Gi
  archive:
    path: /data/archive
    type: hostPath
    perm: DirectoryOrCreate
    # type: hostPath | existingClaim | pvc
    # hostPath: /data/accounts
    # existingClaim: $name
    # storageClass: "standard"
    # accessModes:
    #   - ReadWriteOnce
    # size: 10Gi

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

config:
  # -- ton chain node config
  fullnode:
    root: /var/ton-work/db
    console_port: 30001
    liteserver_port: 43679
  # -- ton api config
  api:
    port: 8081
    env:
      TON_API_ROOT_PATH: "/"
      TON_API_WEBSERVERS_WORKERS: "4"
      TON_API_GET_METHODS_ENABLED: "1"
      TON_API_JSON_RPC_ENABLED: "1"
      TON_API_LOGS_JSONIFY: "1"
      TON_API_CACHE_ENABLED: "0"
      TON_API_TONLIB_LITESERVER_CONFIG: etc/api-global-config.json
      TON_API_TONLIB_KEYSTORE: etc/ton_keystore/

# -- Ton node probes
nodecheck:
  readinessProbe:
    enabled: true
    timeoutSeconds: 10
    failureThreshold: 2
    successThreshold: 1
    periodSeconds: 10
    exec:
      command:
        - sh
        - /scripts/health.sh
  # 24h for sync
  startupProbe:
    enabled: true
    failureThreshold: 2880
    periodSeconds: 30
    timeoutSeconds: 1
    exec:
      command:
        - sh
        - /scripts/health.sh
  livenessProbe:
    enabled: true
    timeoutSeconds: 3
    failureThreshold: 2
    successThreshold: 1
    periodSeconds: 10
    exec:
      command:
        - sh
        - /scripts/health.sh

# -- Api node probes
apicheck:
  readinessProbe: {}
    # enabled: true
    # timeoutSeconds: 10
    # failureThreshold: 2
    # successThreshold: 1
    # periodSeconds: 10
    # exec:
    #   command:
    #     - python3
    #     - /scripts/health.py
  livenessProbe: {}
    # enabled: true
    # timeoutSeconds: 3
    # failureThreshold: 2
    # successThreshold: 1
    # periodSeconds: 10
    # exec:
    #   command:
    #     - python3
    #     - /scripts/health.py
  startupProbe: {}
    # enabled: true
    # failureThreshold: 2880
    # periodSeconds: 30
    # timeoutSeconds: 1
    # exec:
    #   command:
    #     - python3
    #     - /scripts/health.py
