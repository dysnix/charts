apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "op-geth.fullname" . }}
  labels:
    {{- include "op-geth.labels" . | nindent 4 }}
spec:
  serviceName: {{ template "op-geth.name" . }}
  updateStrategy:
    {{- toYaml .Values.updateStrategy | nindent 4 }}
  selector:
    matchLabels:
      {{- include "op-geth.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/configmap-scripts: {{ include (print $.Template.BasePath "/configmap-scripts.yaml") . | sha256sum }}
        {{- if or .Values.syncToS3.enabled .Values.initFromS3.enabled }}
        checksum/s3-secret: {{ include (print $.Template.BasePath "/s3-secret.yaml") . | sha256sum }}
        checksum/s3-configmap: {{ include (print $.Template.BasePath "/s3-configmap.yaml") . | sha256sum }}
        {{- end }}
      labels:
        {{- include "op-geth.selectorLabels" . | nindent 8 }}
        {{- with .Values.podStatusLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      enableServiceLinks: {{ .Values.enableServiceLinks }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "op-geth.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
      {{- if .Values.init.chownData.enabled }}
      - name: chown-data
        image: "{{ .Values.init.chownData.image.repository }}:{{ .Values.init.chownData.image.tag }}"
        imagePullPolicy: {{ .Values.init.chownData.image.pullPolicy | quote }}
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        command: ["chown", "-R", "{{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.runAsGroup }}", "/data"]
        volumeMounts:
        - name: data
          mountPath: /data
      {{- end }}
      {{- if .Values.init.genesis.enabled }}
      - name: init-genesis
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        {{- with .Values.securityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        command: ["sh", "/scripts/init-genesis.sh"]
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        - name: data
          mountPath: {{ .Values.persistence.mountPath | default .Values.config.datadir }}
      {{- end }}
      {{- if .Values.initFromS3.enabled }}
      {{- with .Values.s3config }}
      - name: init-from-s3
        image: "{{ .image.repository }}:{{ .image.tag }}"
        imagePullPolicy: {{ .image.pullPolicy | quote }}
        {{- with $.Values.securityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        command:
        - sh
        - /scripts/init-from-s3.sh
        envFrom:
        - configMapRef:
            name: {{ include "op-geth.fullname" $ }}-s3-config
        - secretRef:
            name: {{ include "op-geth.fullname" $ }}-s3-secret
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        - name: data
          mountPath: {{ $.Values.persistence.mountPath | default $.Values.config.datadir }}
      {{- end }}
      {{- end }}
      {{- if .Values.syncToS3.enabled }}
      {{- with .Values.s3config }}
      - name: sync-to-s3
        image: "{{ .image.repository }}:{{ .image.tag }}"
        imagePullPolicy: {{ .image.pullPolicy | quote }}
        {{- with $.Values.securityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        command:
        - /bin/sh
        - /scripts/sync-to-s3.sh
        envFrom:
        - configMapRef:
            name: {{ include "op-geth.fullname" $ }}-s3-config
        - secretRef:
            name: {{ include "op-geth.fullname" $ }}-s3-secret
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        - name: data
          mountPath: {{ $.Values.persistence.mountPath | default $.Values.config.datadir }}
      {{- end }}
      {{- with .Values.syncToS3.cronjob }}
      {{- if .enabled }}
      - name: disable-sync-to-s3
        image: "{{ .image.repository }}:{{ .image.tag }}"
        imagePullPolicy: {{ .image.pullPolicy | quote }}
        {{- with $.Values.securityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        command:
        - /bin/sh
        - /scripts/s3-cron.sh
        - disable_sync
        - 5s
        volumeMounts:
        - name: scripts
          mountPath: /scripts
      {{- end }}
      {{- end }}
      {{- end }}
      {{- with .Values.extraInitContainers }}
        {{- tpl (toYaml . | nindent 6) $ }}
      {{- end }}
      containers:
      - name: op-geth
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        {{- with .Values.securityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.command }}
        command:
          {{- tpl (toYaml .) $ | nindent 10 }}
        {{- end }}
        args:
        - --datadir={{ .Values.config.datadir }}
        {{- with (get .Values.config "op-network") }}
        - --op-network={{ . }}
        {{- end }}
        - --syncmode={{ .Values.config.syncmode }}
        - --maxpeers={{ .Values.config.maxpeers }}
        {{- if .Values.config.nodiscover }}
        - --nodiscover
        {{- end }}
        - --authrpc.addr=0.0.0.0
        - --authrpc.jwtsecret=/secrets/jwt.hex
        - --authrpc.vhosts={{ join "," .Values.config.authrpc.vhosts }}
        - --authrpc.port={{ .Values.config.authrpc.port }}
        - --http
        - --http.addr=0.0.0.0
        - --http.port={{ .Values.config.http.port }}
        - --http.api={{ join "," .Values.config.http.api }}
        - --http.vhosts={{ join "," .Values.config.http.vhosts }}
        - --http.corsdomain={{ join "," .Values.config.http.corsdomain }}
        {{- if .Values.config.cache }}
        - --cache={{ .Values.config.cache }}
        {{- end }}
        - --gcmode={{ .Values.config.gcmode }}
        - --snapshot={{ .Values.config.snapshot }}
        {{- with .Values.config.rollup }}
        - --rollup.sequencerhttp={{ .sequencerhttp }}
        - --rollup.disabletxpoolgossip={{ .disabletxpoolgossip }}
        {{- with .halt }}
        - --rollup.halt={{ . }}
        {{- end }}
        {{- end }}
        - --verbosity={{ .Values.config.verbosity }}
        {{- if .Values.config.ws.enabled }}
        - --ws
        - --ws.addr=0.0.0.0
        - --ws.api={{ join "," .Values.config.ws.api }}
        - --ws.origins={{ join "," .Values.config.ws.origins }}
        - --ws.port={{ .Values.config.ws.port }}
        {{- end }}
        {{- if .Values.config.metrics.enabled }}
        - --metrics.addr=0.0.0.0
        - --metrics.port=6060
        - --metrics
        {{- if .Values.config.metrics.expensive }}
        - --metrics.expensive
        {{- end }}
        {{- end }}
        {{- with .Values.config.vmodule }}
        - --log.vmodule={{ join "," . }}
        {{- end }}
        {{- with .Values.config.bootnodes }}
        - --bootnodes={{ join "," . }}
        {{- end }}
        {{- if not .Values.config.nodiscover }}
        - --port={{ .Values.config.port }}
        - --discovery.port={{ .Values.config.discovery.port }}
        {{- end }}
        - --nat={{ .Values.config.nat }}
        - --state.scheme={{ .Values.config.state.scheme }}
        {{- with .Values.extraArgs }}
        {{- tpl (toYaml .) $ | nindent 8 }}
        {{- end }}
        ports:
        - name: http
          containerPort: {{ .Values.config.http.port }}
        - name: authrpc
          containerPort: {{ .Values.config.authrpc.port }}
        {{- if .Values.config.ws.enabled }}
        - name: ws
          containerPort: {{ .Values.config.ws.port }}
        {{- end }}
        {{- if .Values.config.metrics.enabled }}
        - name: metrics
          containerPort: 6060
        {{- end }}
        {{- if not .Values.config.nodiscover }}
        - name: p2p-tcp
          containerPort: {{ .Values.config.port }}
          {{- if .Values.config.useHostPort }}
          hostPort: {{ .Values.config.port }}
          {{- end }}
          protocol: TCP
        - name: p2p-udp
          containerPort: {{ .Values.config.discovery.port }}
          {{- if .Values.config.useHostPort }}
          hostPort: {{ .Values.config.discovery.port }}
          {{- end }}
          protocol: UDP
        {{- end }}
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          {{- include "op-geth.healthcheck" (list $ .Values.livenessProbe) | nindent 10 }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          {{- include "op-geth.healthcheck" (list $ .Values.readinessProbe) | nindent 10 }}
        {{- end }}
        {{- if .Values.startupProbe.enabled }}
        startupProbe:
          {{- include "op-geth.healthcheck" (list $ .Values.startupProbe) | nindent 10 }}
        {{- end }}
        volumeMounts:
        - name: data
          mountPath: {{ .Values.persistence.mountPath | default .Values.config.datadir }}
        - name: secrets
          mountPath: /secrets
        - name: scripts
          mountPath: /scripts
        {{- with .Values.extraVolumeMounts }}
        {{- tpl (toYaml .) $ | nindent 8 }}
        {{- end }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
      {{- with .Values.sidecarContainers }}
        {{- tpl (toYaml . | nindent 6) $ }}
      {{- end }}
      volumes:
      - name: secrets
        secret:
          secretName: {{ template "op-geth.fullname" . }}
      - name: scripts
        configMap:
          name: {{ template "op-geth.fullname" . }}-scripts
      {{- if eq .Values.persistence.type "hostPath" }}
      - name: data
        hostPath:
          path: {{ .Values.persistence.hostPath.path }}
          type: {{ .Values.persistence.hostPath.type }}
      {{- end }}
      {{- with .Values.extraVolumes }}
      {{- tpl (toYaml .) $ | nindent 6 }}
      {{- end }}
  {{- if eq .Values.persistence.type "pvc" }}
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        {{- include "op-geth.selectorLabels" . | nindent 8 }}
      {{- with .Values.persistence.pvc.annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      accessModes:
      - {{ .Values.persistence.pvc.accessMode }}
      {{- if .Values.persistence.pvc.storageClass }}
      {{- if eq .Values.persistence.pvc.storageClass "-" }}
      storageClassName: ""
      {{- else }}
      storageClassName: {{ .Values.persistence.pvc.storageClass | quote }}
      {{- end }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.pvc.size | quote }}
  {{- end }}