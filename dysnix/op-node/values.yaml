image:
  repository: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node
  tag: ""
  pullPolicy: Always

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

updateStrategy:
  type: RollingUpdate

terminationGracePeriodSeconds: 300

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  allowPrivilegeEscalation: false
  privileged: false
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
  # runAsGroup: 1000

## Override op-node command (can be templated)
command: []

## Extra op-node arguments (can be templated)
extraArgs: []

## Extra init containers, can be templated
initContainers: []

## Sidecar containers, can be templated
sidecarContainers: []

## Services config
services:
  p2p:
    enabled: true
    type: NodePort
    loadBalancerIP: ""
    port: 9222
    # it's better to set nodePort equal to .Values.config.node.p2p.port when the svc type is "NodePort"
    # nodePort: 9222
    annotations: {}
    publishNotReadyAddresses: true
  p2pDiscovery:
    enabled: true
    type: NodePort
    loadBalancerIP: ""
    port: 9222
    # it's better to set nodePort equal to .Values.config.node.p2p.port when the svc type is "NodePort"
    # nodePort: 9222
    annotations: {}
    publishNotReadyAddresses: true
  rpc:
    enabled: true
    type: ClusterIP
    port: 9545
    annotations: {}
  metrics:
    enabled: true
    type: ClusterIP
    port: 7300
    annotations: {}
    publishNotReadyAddresses: true

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts: []
    # - host: op-node.examplerpc.com
    #   paths:
    #     - path: /
    #       pathType: ImplementationSpecific
  tls: []
    # - secretName: op-node-tls
    #   hosts:
    #     - op-node.examplerpc.com

# Create Prometheus Operator serviceMonitor
serviceMonitor:
  enabled: false
  # interval: 10s
  # scrapeTimeout: 2s
  # honorLabels: true
  # relabelings: []
  # metricRelabelings: []

livenessProbe:
  enabled: true
  initialDelaySeconds: 60
  periodSeconds: 30
  successThreshold: 1
  failureThreshold: 3
  timeoutSeconds: 5
  httpGet:
    path: /healthz
    port: rpc

readinessProbe:
  enabled: false
  # initialDelaySeconds: 60
  # periodSeconds: 30
  # successThreshold: 1
  # failureThreshold: 3
  # timeoutSeconds: 5
  # httpGet:
  #   path: /healthz
  #   port: rpc

resources: {}

affinity: {}

nodeSelector: {}

tolerations: []

## Main op-node config
config:
  jwt: ""                              # REQUIRED for communication with op-geth
  network: op-mainnet                  # which network to use
  port: 9545
  logLevel: INFO
  syncmode: ""                         # can be "execution-layer" if you are using "snap" syncmode on execution layer
  l1:
    url: https://1rpc.io/eth                              # eth L1 node rpc url, can also be ws://
    trustrpc: false                                       # enable if you trust L1 provider and want to fetch data from it faster
    rpckind: standard                                     # can be: alchemy, quicknode, infura, parity, nethermind, debug_geth, erigon, basic, any, standard
    beacon: https://ethereum-beacon-api.publicnode.com    # endpoint for L1 beacon node, used for retrieving EIP-4844 blob transactions
  l2:
    url: http://op-geth-authrpc:8551  # authrpc addr of op-geth L2 node, can also be ws://
  rollup:
    config: ""                         # path to rollup config json
    loadProtocolVersions: true         # load superchain contract
    halt: ""                           # possible values: major, minor, patch, none
  verifier:
    l1Confs: 0                         # number of L1 blocks to keep distance from the L1 head before deriving L2 data from
  metrics:
    enabled: false                     # enable metrics server
    port: 7300
  p2p:
    nat: false                         # use NAT to get external IP
    advertiseIP: ""                    # override announced p2p IP
    port: 9222
    useHostPort: false                 # use hostPort for p2p traffic instead of dedicated k8s svc
    bootnodes: []                      # override bootnodes
